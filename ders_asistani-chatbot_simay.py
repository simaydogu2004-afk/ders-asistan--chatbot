# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nbzKBr6usGehcmXXVMPkP-Y1AIjZPIsP
"""

# -*- coding: utf-8 -*-
"""
🤖 DERS ASİSTANI CHATBOT - GÜNCEL NUMPY SÜRÜMÜ
"""

# %%
# 1. GEREKLİ KÜTÜPHANELERİ YÜKLE (GÜNCEL VERSİYONLARLA)
!pip install -q --upgrade pip
!pip install -q numpy
!pip install -q pymupdf PyPDF2

print("✅ Kütüphaneler yüklendi!")

# %%
# 2. GEREKLİ İMPORT'LAR
import numpy as np
import re
import math
from collections import Counter
import json
import os

print("✅ Temel kütüphaneler import edildi!")
print(f"🔢 NumPy versiyonu: {np.__version__}")

# PyMuPDF'ı kontrol et
try:
    import fitz  # PyMuPDF
    import PyPDF2
    print("✅ PDF kütüphaneleri yüklendi!")
except ImportError as e:
    print(f"❌ PDF kütüphanesi hatası: {e}")
    print("🔧 PDF kütüphaneleri yükleniyor...")
    !pip install -q pymupdf PyPDF2
    import fitz
    import PyPDF2

# %%
# 3. DATA KLASÖRÜNÜ KESİNLİKLE OLUŞTUR
print("📁 Data klasörü oluşturuluyor...")

# Data klasörünü kesinlikle oluştur
data_folder = "data"
if not os.path.exists(data_folder):
    os.makedirs(data_folder)
    print(f"✅ '{data_folder}' klasörü oluşturuldu")
else:
    print(f"✅ '{data_folder}' klasörü zaten var")

# Klasör içeriğini kontrol et
print(f"\n📂 '{data_folder}' klasörü içeriği:")
try:
    files = os.listdir(data_folder)
    if files:
        for file in files:
            print(f"   📄 {file}")
    else:
        print("   📭 Klasör boş")
except Exception as e:
    print(f"   ❌ Klasör okuma hatası: {e}")

# %%
# 4. PDF OKUMA SİSTEMİ
class PDFReader:
    def __init__(self):
        pass

    def read_pdf(self, file_path):
        """PDF dosyasını oku ve metne çevir"""
        try:
            text = ""

            # PyMuPDF ile okumayı dene (daha iyi)
            try:
                doc = fitz.open(file_path)
                for page in doc:
                    text += page.get_text()
                doc.close()
                print(f"✅ PDF okundu (PyMuPDF): {file_path}")
            except Exception as e:
                print(f"⚠️  PyMuPDF hatası, PyPDF2 deniyor: {e}")
                # PyPDF2 ile dene
                with open(file_path, 'rb') as file:
                    reader = PyPDF2.PdfReader(file)
                    for page in reader.pages:
                        text += page.extract_text()
                print(f"✅ PDF okundu (PyPDF2): {file_path}")

            # Metni temizle
            text = self.clean_text(text)
            return text

        except Exception as e:
            print(f"❌ PDF okuma hatası: {file_path} - {str(e)}")
            return None

    def clean_text(self, text):
        """Metni temizle ve düzenle"""
        # Fazla boşlukları kaldır
        text = re.sub(r'\s+', ' ', text)
        # Satır sonlarını düzelt
        text = text.replace('\n', ' ').replace('\r', ' ')
        return text.strip()

# %%
# 5. GELİŞMİŞ DOSYA OKUMA SİSTEMİ
class AdvancedFileDataLoader:
    def __init__(self, data_folder="data"):
        self.data_folder = data_folder
        self.pdf_reader = PDFReader()
        # Klasörü KESİNLİKLE oluştur
        os.makedirs(data_folder, exist_ok=True)
        print(f"✅ '{data_folder}' klasörü hazır")

    def create_sample_files(self):
        """Örnek dosyalar oluştur"""
        sample_data = {
            "programlama.txt": """PYTHON PROGRAMLAMA

Fonksiyonlar: def anahtar kelimesiyle tanımlanır
Örnek: def topla(a, b): return a + b

Döngüler: for ve while döngüleri
for i in range(5): print(i)

Listeler: Köşeli parantezle oluşturulur
my_list = [1, 2, 3, 4, 5]

Sözlükler: Anahtar-değer çiftleri
my_dict = {"isim": "Ali", "yas": 20}""",

            "matematik.txt": """MATEMATİK - TÜREV VE İNTEGRAL

Türev: Fonksiyonun değişim oranı
f(x) = x² → f'(x) = 2x

Integral: Türevin tersi işlem
∫x² dx = (x³/3) + C

Trigonometri: sin, cos, tan fonksiyonları
sin(90) = 1, cos(0) = 1

Geometri: Üçgen, kare, daire alan hesaplamaları""",

            "fizik.txt": """FİZİK YASALARI

Newton Yasaları:
1. Eylemsizlik yasası - Hareket halindeki cisim durmak istemez
2. F = m * a - Kuvvet kütle çarpı ivme
3. Etki-tepki yasası - Her etkiye eşit tepki

Enerji: Enerji korunumu yasası
Kinetik enerji = (1/2) * m * v²

Manyetizma: Mıknatısların kutupları, manyetik alan""",

            "tarih.txt": """TARİH - OSMANLI DEVLETİ

Kuruluş: 1299 - Osman Gazi
Yükselme: 1453 - İstanbul'un fethi
Başkentler: Söğüt, Bursa, Edirne, İstanbul

Önemli Padişahlar:
- Fatih Sultan Mehmet: İstanbul'u fethetti
- Kanuni Sultan Süleyman: En parlak dönem
- Yavuz Sultan Selim: Halifeliği getirdi

Kurtuluş Savaşı: 1919-1923 arası""",

            "kimya.txt": """KİMYA - PERİYODİK TABLO

Elementler: Atom numaralarına göre sıralanır
Gruplar: Dikey sütunlar (1A-8A)
Periyotlar: Yatay satırlar (1-7)

Önemli Elementler:
- Hidrojen (H): En hafif element
- Oksijen (O): Solunum için gerekli
- Altın (Au): Değerli metal
- Gümüş (Ag): İletken metal

Kimyasal Tepkimeler: Yanma, çözünme, sentez"""
        }

        created_count = 0
        for filename, content in sample_data.items():
            filepath = os.path.join(self.data_folder, filename)
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"✅ Örnek dosya oluşturuldu: {filename}")
                created_count += 1
            except Exception as e:
                print(f"❌ Dosya oluşturma hatası: {filename} - {e}")

        return created_count

    def load_from_files(self):
        """Klasördeki tüm dosyaları yükle (PDF ve TXT)"""
        documents = []

        # Önce klasörün var olduğundan emin ol
        if not os.path.exists(self.data_folder):
            print(f"❌ '{self.data_folder}' klasörü yok, oluşturuluyor...")
            os.makedirs(self.data_folder)

        # Klasörde dosya var mı kontrol et
        files = os.listdir(self.data_folder)
        if not files:
            print("📭 Data klasörü boş, örnek dosyalar oluşturuluyor...")
            created_count = self.create_sample_files()
            if created_count == 0:
                print("❌ Hiç dosya oluşturulamadı!")
                return documents
            # Yeniden listele
            files = os.listdir(self.data_folder)

        print(f"\n📂 Data klasöründe {len(files)} dosya bulundu:")

        for filename in files:
            filepath = os.path.join(self.data_folder, filename)
            print(f"   🔍 İşleniyor: {filename}")

            if filename.endswith('.txt'):
                # TXT dosyasını oku
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()

                    if not content.strip():
                        print(f"   ⚠️  Boş dosya: {filename}")
                        continue

                    # Dosya adından konuyu çıkar
                    subject = filename.replace('.txt', '').lower()

                    documents.append({
                        'content': content,
                        'subject': subject,
                        'file_name': filename,
                        'source': 'txt_file',
                        'type': 'text'
                    })
                    print(f"   ✅ TXT yüklendi: {filename}")

                except Exception as e:
                    print(f"   ❌ TXT okuma hatası: {filename} - {str(e)}")

            elif filename.endswith('.pdf'):
                # PDF dosyasını oku
                content = self.pdf_reader.read_pdf(filepath)
                if content and content.strip():
                    # PDF adından konuyu çıkar
                    subject = filename.replace('.pdf', '').lower()

                    documents.append({
                        'content': content,
                        'subject': subject,
                        'file_name': filename,
                        'source': 'pdf_file',
                        'type': 'pdf'
                    })
                    print(f"   ✅ PDF yüklendi: {filename}")
                else:
                    print(f"   ❌ PDF içerik alınamadı: {filename}")

        print(f"\n📊 YÜKLEME ÖZETİ:")
        print(f"   📚 Toplam belge: {len(documents)}")

        return documents

# %%
# 6. SİSTEMİ KUR
print("🚀 PDF DESTEKLİ Ders Asistanı Sistemi Kuruluyor...")

# Dosyalardan veri yükle
file_loader = AdvancedFileDataLoader("data")
documents = file_loader.load_from_files()

if not documents:
    print("❌ Hiç belge yüklenemedi! Manuel dosya oluşturuluyor...")
    manual_file = os.path.join("data", "manuel_ornek.txt")
    with open(manual_file, 'w', encoding='utf-8') as f:
        f.write("Python programlama dili. Fonksiyonlar def ile tanımlanır. Örnek: def merhaba(): print('Merhaba')")
    print(f"✅ Manuel dosya oluşturuldu")
    documents = file_loader.load_from_files()

print(f"\n🎉 BAŞARI! Toplam {len(documents)} belge yüklendi")

# %%
# 7. TF-IDF VEKTÖRLEŞTİRME (GÜNCEL NUMPY İLE)
class AdvancedTextEncoder:
    def __init__(self):
        self.vocab = {}
        self.documents = []
        self.tfidf_matrix = None
        self.document_metadata = []

    def build_vocabulary(self, documents):
        """Kelimelerden oluşan sözlük oluştur"""
        all_words = []
        for doc in documents:
            words = self._tokenize(doc['content'])
            all_words.extend(words)

        if not all_words:
            print("❌ Hiç kelime bulunamadı!")
            return

        word_counts = Counter(all_words)
        self.vocab = {word: idx for idx, (word, _) in enumerate(word_counts.most_common(2000))}
        print(f"📚 Kelime dağarcığı: {len(self.vocab)} kelime")

    def _tokenize(self, text):
        """Metni kelimelere ayır"""
        text = text.lower()
        text = text.replace('ğ', 'g').replace('ü', 'u').replace('ş', 's').replace('ı', 'i').replace('ö', 'o').replace('ç', 'c')
        words = re.findall(r'\b\w+\b', text)
        stop_words = {'bir', 've', 'ile', 'için', 'ama', 'fakat', 'ancak', 'kadar', 'gibi', 'üzere', 'diye', 'dek'}
        return [word for word in words if len(word) > 2 and word not in stop_words]

    def compute_tfidf(self, documents):
        """TF-IDF vektörlerini hesapla"""
        self.documents = []
        self.document_metadata = []

        n_docs = len(documents)
        if n_docs == 0:
            print("❌ İşlenecek belge yok!")
            return False

        print(f"🔧 {n_docs} belge işleniyor...")
        self.build_vocabulary(documents)

        n_vocab = len(self.vocab)
        if n_vocab == 0:
            print("❌ Kelime dağarcığı oluşturulamadı!")
            return False

        # TF matrisi
        tf_matrix = np.zeros((n_docs, n_vocab))
        doc_word_count = np.zeros(n_docs)

        for doc_idx, doc in enumerate(documents):
            words = self._tokenize(doc['content'])
            doc_word_count[doc_idx] = len(words)

            for word in words:
                if word in self.vocab:
                    word_idx = self.vocab[word]
                    tf_matrix[doc_idx, word_idx] += 1

            if doc_word_count[doc_idx] > 0:
                tf_matrix[doc_idx] /= doc_word_count[doc_idx]

        # IDF hesapla
        doc_freq = np.sum(tf_matrix > 0, axis=0)
        idf_vector = np.log((n_docs + 1) / (doc_freq + 1)) + 1

        # TF-IDF matrisi
        self.tfidf_matrix = tf_matrix * idf_vector

        for doc in documents:
            self.documents.append(doc['content'])
            self.document_metadata.append({
                'subject': doc['subject'],
                'file_name': doc['file_name'],
                'source': doc.get('source', 'unknown'),
                'type': doc.get('type', 'unknown')
            })

        print(f"✅ {n_docs} belge için TF-IDF matrisi oluşturuldu")
        return True

    def encode_query(self, query):
        """Sorguyu vektöre çevir"""
        if not self.vocab:
            return None

        words = self._tokenize(query)
        vector = np.zeros(len(self.vocab))

        for word in words:
            if word in self.vocab:
                vector[self.vocab[word]] += 1

        if len(words) > 0:
            vector /= len(words)

        return vector

    def search(self, query, k=3, subject_filter=None):
        """Benzerlik araması yap"""
        if self.tfidf_matrix is None:
            return []

        query_vector = self.encode_query(query)
        if query_vector is None:
            return []

        similarities = []
        for doc_idx, doc_vector in enumerate(self.tfidf_matrix):
            if subject_filter and subject_filter != "Tüm Konular":
                doc_subject = self.document_metadata[doc_idx]['subject']
                if doc_subject != subject_filter:
                    similarities.append(0)
                    continue

            dot_product = np.dot(doc_vector, query_vector)
            doc_norm = np.linalg.norm(doc_vector)
            query_norm = np.linalg.norm(query_vector)

            if doc_norm > 0 and query_norm > 0:
                similarity = dot_product / (doc_norm * query_norm)
            else:
                similarity = 0

            similarities.append(similarity)

        indices = np.argsort(similarities)[-k:][::-1]

        results = []
        for idx in indices:
            if similarities[idx] > 0.1:
                results.append({
                    'content': self.documents[idx],
                    'metadata': self.document_metadata[idx],
                    'score': similarities[idx]
                })

        return results

# %%
# 8. RAG SİSTEMİNİ BAŞLAT
print("🔧 RAG Sistemi Başlatılıyor...")

encoder = AdvancedTextEncoder()
success = encoder.compute_tfidf(documents)

if not success:
    print("❌ TF-IDF oluşturulamadı!")
else:
    print("✅ TF-IDF başarıyla oluşturuldu")

# %%
# 9. GELİŞMİŞ RAG SİSTEMİ
class AdvancedRAG:
    def __init__(self, encoder):
        self.encoder = encoder

    def get_subject_stats(self):
        """Konu bazlı istatistikleri göster"""
        if not self.encoder.document_metadata:
            print("❌ Hiç belge yüklenmemiş!")
            return {}

        subjects = {}
        for meta in self.encoder.document_metadata:
            subject = meta['subject']
            if subject in subjects:
                subjects[subject] += 1
            else:
                subjects[subject] = 1

        print("\n📊 KONU İSTATİSTİKLERİ:")
        print("-" * 40)
        for subject, count in subjects.items():
            print(f"   📚 {subject}: {count} belge")
        return subjects

    def get_available_subjects(self):
        """Mevcut konuları listele"""
        if not self.encoder.document_metadata:
            return []

        subjects = set()
        for meta in self.encoder.document_metadata:
            subjects.add(meta['subject'])
        return sorted(list(subjects))

    def show_available_subjects(self):
        """Mevcut konuları göster"""
        subjects = self.get_available_subjects()
        print("\n🎯 MEVCUT KONULAR:")
        print("-" * 30)
        if subjects:
            for i, subject in enumerate(subjects, 1):
                print(f"   {i}. {subject}")
        else:
            print("   📭 Hiç konu bulunamadı")
        print("-" * 30)
        return subjects

    def get_enhanced_answer(self, question, subject="Tüm Konular"):
        """Gelişmiş formatlı cevap"""
        if not self.encoder.documents:
            return "❌ Sistem henüz hazır değil!"

        results = self.encoder.search(question, k=3, subject_filter=subject)

        if not results:
            return self._get_no_answer_response(question, subject)

        return self._format_answer(results, question, subject)

    def _get_no_answer_response(self, question, subject):
        """Cevap bulunamadığında"""
        available_subjects = self.get_available_subjects()

        if subject == "Tüm Konular":
            return f"""🤔 **Cevap Bulunamadı**

"{question}" sorusu için bilgi bankamda yeterli bilgi bulamadım.

📚 **Mevcut Konular:** {', '.join(available_subjects) if available_subjects else 'Hiç konu yok'}"""
        else:
            return f"""🤔 **{subject.upper()} Konusunda Cevap Bulunamadı**

"{question}" sorusu için {subject} konusunda yeterli bilgi bulamadım."""

    def _format_answer(self, results, question, subject):
        """Cevabı formatla"""
        answer_parts = []
        answer_parts.append("🎯 **ASİSTAN CEVABI**")
        answer_parts.append("=" * 50)

        best_result = results[0]
        best_content = self._extract_relevant_part(best_result['content'], question)
        file_type = "📄 PDF" if best_result['metadata'].get('type') == 'pdf' else "📖 TXT"

        answer_parts.append(f"**{file_type} {best_result['metadata']['subject'].upper()}**")
        answer_parts.append(f"📁 Dosya: {best_result['metadata']['file_name']}")
        answer_parts.append("")
        answer_parts.append(f"**📝 İlgili Bilgi:**")
        answer_parts.append(f"_{best_content}_")
        answer_parts.append("")

        if len(results) > 1:
            answer_parts.append("**🔍 DİĞER KAYNAKLAR:**")
            for i, result in enumerate(results[1:], 2):
                file_type = "📄" if result['metadata'].get('type') == 'pdf' else "📖"
                preview = result['content'][:100] + "..." if len(result['content']) > 100 else result['content']
                answer_parts.append(f"{i}. {file_type} **{result['metadata']['subject']}**: {preview}")
            answer_parts.append("")

        answer_parts.append("**📊 ARAMA SONUÇLARI:**")
        answer_parts.append(f"• Toplam kaynak: {len(results)}")
        answer_parts.append(f"• Seçilen konu: {subject}")
        answer_parts.append("")
        answer_parts.append("💡 *Daha detaylı bilgi için farklı sorular sorabilirsiniz*")

        return "\n".join(answer_parts)

    def _extract_relevant_part(self, content, question):
        """İçerikten soruyla ilgili kısmı çıkar"""
        sentences = content.split('. ')
        question_words = set(self.encoder._tokenize(question))

        best_sentence = ""
        best_score = 0

        for sentence in sentences:
            if len(sentence.strip()) < 10:
                continue

            sentence_words = set(self.encoder._tokenize(sentence))
            common_words = question_words.intersection(sentence_words)
            score = len(common_words)

            if score > best_score:
                best_score = score
                best_sentence = sentence.strip()

        if best_sentence and best_score >= 1:
            return best_sentence

        return content[:200] + "..." if len(content) > 200 else content

# %%
# 10. SİSTEMİ BAŞLAT
if success:
    rag_system = AdvancedRAG(encoder)

    print("\n" + "🎯" * 20)
    print("DERS ASİSTANI SİSTEMİ HAZIR!")
    print("🎯" * 20)

    rag_system.get_subject_stats()
    rag_system.show_available_subjects()

    print("\n🎉 SİSTEM HAZIR! Aşağıdaki menüyü kullanabilirsiniz.")
else:
    print("❌ SİSTEM HAZIR DEĞİL!")
    rag_system = None

# %%
# 11. BASİT CHAT ARAYÜZÜ
def simple_chat(rag_system):
    """Basit chat arayüzü"""
    if rag_system is None:
        print("❌ Sistem hazır değil!")
        return

    print("\n" + "="*60)
    print("🤖 DERS ASİSTANI CHATBOT")
    print("="*60)

    available_subjects = rag_system.show_available_subjects()

    if not available_subjects:
        print("❌ Hiç konu bulunamadı!")
        return

    print("\n🎯 **KOMUTLAR:**")
    print("   'tüm'    - Tüm Konularda Ara")
    print("   'istat'  - İstatistikler")
    print("   'konu'   - Konuları göster")
    print("   'quit'   - Çıkış")
    print("-"*60)

    while True:
        subject_input = input("\n📖 Konu seçin (veya komut): ").strip().lower()

        if subject_input == 'quit':
            print("👋 Görüşmek üzere!")
            break
        elif subject_input == 'istat':
            rag_system.get_subject_stats()
            continue
        elif subject_input == 'konu':
            rag_system.show_available_subjects()
            continue
        elif subject_input == 'tüm':
            subject = "Tüm Konular"
        elif subject_input in available_subjects:
            subject = subject_input
        else:
            print(f"⚠️  Geçersiz! Mevcut konular: {', '.join(available_subjects)}")
            continue

        question = input(f"\n💭 [{subject}] Sorunuz: ").strip()

        if question.lower() in ['quit', 'exit', 'çık']:
            print("👋 Görüşmek üzere!")
            break

        if not question:
            print("⚠️ Lütfen bir soru girin!")
            continue

        print("\n🔍 Bilgilerim aranıyor...")
        answer = rag_system.get_enhanced_answer(question, subject)

        print("\n" + "="*50)
        print(answer)
        print("="*50)

# %%
# 12. ANA MENÜ
def main_menu():
    """Ana menü"""
    current_system = rag_system

    while True:
        print("\n🔧 **ANA MENÜ**")
        print("1. 💬 Chat Botunu Başlat")
        print("2. 📊 İstatistikleri Göster")
        print("3. 🎯 Konuları Listele")
        print("4. 🔄 Sistemi Yeniden Başlat")
        print("5. 🚪 Çıkış")

        choice = input("\nSeçiminiz (1-5): ").strip()

        if choice == "1":
            simple_chat(current_system)
        elif choice == "2":
            if current_system:
                current_system.get_subject_stats()
            else:
                print("❌ Sistem hazır değil!")
        elif choice == "3":
            if current_system:
                current_system.show_available_subjects()
            else:
                print("❌ Sistem hazır değil!")
        elif choice == "4":
            print("🔄 Sistem yeniden başlatılıyor...")
            new_documents = file_loader.load_from_files()
            if new_documents:
                new_encoder = AdvancedTextEncoder()
                new_success = new_encoder.compute_tfidf(new_documents)
                if new_success:
                    current_system = AdvancedRAG(new_encoder)
                    print("✅ Sistem başarıyla yeniden başlatıldı!")
                    current_system.get_subject_stats()
                else:
                    print("❌ Sistem yeniden başlatılamadı!")
            else:
                print("❌ Hiç dosya yüklenemedi!")
        elif choice == "5":
            print("👋 Görüşmek üzere!")
            break
        else:
            print("⚠️  Geçersiz seçim! 1-5 arası bir sayı girin.")

# %%
# 13. PROGRAMI BAŞLAT
if rag_system is not None:
    main_menu()
else:
    print("❌ Sistem başlatılamadı!")